name: EC2 Instance for Secret Scoops

on:
  workflow_dispatch:
    inputs:
      template_file:
        description: "Path to the CloudFormation template file"
        required: false
        default: "infrastructure/cloudformation/templates/ec2-launch.yml"
      stack_name:
        description: "Name of the CloudFormation stack"
        required: false
        default: "EC2InstancePublicSubnetStackScoops"
      s3_prefix:
        description: "S3 prefix for deployment artifacts"
        required: false
        default: "ec2"
      tag_value:
        description: "Tag value for resources"
        required: false
        default: "EC2InstancePublicSubnetStackScoops"
      stack_params:
        description: "Stack parameters"
        required: false
        default: "ParameterKey=CIDRIpForSSH,ParameterValue=0.0.0.0/0 ParameterKey=CIDRIpForHTTP,ParameterValue=0.0.0.0/0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required for actions/checkout

    steps:
      # Step 0: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 1: Configure AWS Credentials
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: us-west-1
      
      # Step 2: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        uses: ./.github/actions/deploy-stack
        with:
          template_file: ${{ inputs.template_file }}
          stack_name: ${{ inputs.stack_name }}
          s3_prefix: ${{ inputs.s3_prefix }}
          tag_value: ${{ inputs.tag_value }}
          stack_params: ${{ inputs.stack_params }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          aws_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}

      # Step 3: Wait for CloudFormation Stack Completion
      - name: Wait for Stack Completion
        run: infrastructure/cloudformation/scripts/wait_for_stack.sh "${{ inputs.stack_name }}"
      
      # Step 4: Deploy Application on EC2 Instance
      - name: Deploy Application on EC2 Instance
        run: .github/scripts/deploy_app.sh "${{ inputs.stack_name }}" "${{github.repository}}"